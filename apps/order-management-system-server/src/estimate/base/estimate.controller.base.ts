/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EstimateService } from "../estimate.service";
import { EstimateCreateInput } from "./EstimateCreateInput";
import { Estimate } from "./Estimate";
import { EstimateFindManyArgs } from "./EstimateFindManyArgs";
import { EstimateWhereUniqueInput } from "./EstimateWhereUniqueInput";
import { EstimateUpdateInput } from "./EstimateUpdateInput";

export class EstimateControllerBase {
  constructor(protected readonly service: EstimateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Estimate })
  async createEstimate(
    @common.Body() data: EstimateCreateInput
  ): Promise<Estimate> {
    return await this.service.createEstimate({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        amount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Estimate] })
  @ApiNestedQuery(EstimateFindManyArgs)
  async estimates(@common.Req() request: Request): Promise<Estimate[]> {
    const args = plainToClass(EstimateFindManyArgs, request.query);
    return this.service.estimates({
      ...args,
      select: {
        amount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Estimate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async estimate(
    @common.Param() params: EstimateWhereUniqueInput
  ): Promise<Estimate | null> {
    const result = await this.service.estimate({
      where: params,
      select: {
        amount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        date: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Estimate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEstimate(
    @common.Param() params: EstimateWhereUniqueInput,
    @common.Body() data: EstimateUpdateInput
  ): Promise<Estimate | null> {
    try {
      return await this.service.updateEstimate({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          amount: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          date: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Estimate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEstimate(
    @common.Param() params: EstimateWhereUniqueInput
  ): Promise<Estimate | null> {
    try {
      return await this.service.deleteEstimate({
        where: params,
        select: {
          amount: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          date: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
