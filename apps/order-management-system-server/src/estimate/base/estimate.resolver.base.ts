/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Estimate } from "./Estimate";
import { EstimateCountArgs } from "./EstimateCountArgs";
import { EstimateFindManyArgs } from "./EstimateFindManyArgs";
import { EstimateFindUniqueArgs } from "./EstimateFindUniqueArgs";
import { CreateEstimateArgs } from "./CreateEstimateArgs";
import { UpdateEstimateArgs } from "./UpdateEstimateArgs";
import { DeleteEstimateArgs } from "./DeleteEstimateArgs";
import { Customer } from "../../customer/base/Customer";
import { Project } from "../../project/base/Project";
import { EstimateService } from "../estimate.service";
@graphql.Resolver(() => Estimate)
export class EstimateResolverBase {
  constructor(protected readonly service: EstimateService) {}

  async _estimatesMeta(
    @graphql.Args() args: EstimateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Estimate])
  async estimates(
    @graphql.Args() args: EstimateFindManyArgs
  ): Promise<Estimate[]> {
    return this.service.estimates(args);
  }

  @graphql.Query(() => Estimate, { nullable: true })
  async estimate(
    @graphql.Args() args: EstimateFindUniqueArgs
  ): Promise<Estimate | null> {
    const result = await this.service.estimate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Estimate)
  async createEstimate(
    @graphql.Args() args: CreateEstimateArgs
  ): Promise<Estimate> {
    return await this.service.createEstimate({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Estimate)
  async updateEstimate(
    @graphql.Args() args: UpdateEstimateArgs
  ): Promise<Estimate | null> {
    try {
      return await this.service.updateEstimate({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Estimate)
  async deleteEstimate(
    @graphql.Args() args: DeleteEstimateArgs
  ): Promise<Estimate | null> {
    try {
      return await this.service.deleteEstimate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: Estimate
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  async getProject(
    @graphql.Parent() parent: Estimate
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
