/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Estimate as PrismaEstimate,
  Customer as PrismaCustomer,
  Project as PrismaProject,
} from "@prisma/client";

export class EstimateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EstimateCountArgs, "select">): Promise<number> {
    return this.prisma.estimate.count(args);
  }

  async estimates<T extends Prisma.EstimateFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstimateFindManyArgs>
  ): Promise<PrismaEstimate[]> {
    return this.prisma.estimate.findMany<Prisma.EstimateFindManyArgs>(args);
  }
  async estimate<T extends Prisma.EstimateFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstimateFindUniqueArgs>
  ): Promise<PrismaEstimate | null> {
    return this.prisma.estimate.findUnique(args);
  }
  async createEstimate<T extends Prisma.EstimateCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstimateCreateArgs>
  ): Promise<PrismaEstimate> {
    return this.prisma.estimate.create<T>(args);
  }
  async updateEstimate<T extends Prisma.EstimateUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstimateUpdateArgs>
  ): Promise<PrismaEstimate> {
    return this.prisma.estimate.update<T>(args);
  }
  async deleteEstimate<T extends Prisma.EstimateDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EstimateDeleteArgs>
  ): Promise<PrismaEstimate> {
    return this.prisma.estimate.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.estimate
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.estimate
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
